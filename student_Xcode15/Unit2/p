/*:
## Exercise - Memberwise and Custom Initializers
 
 Create your `GPS` struct again, but this time do not provide default values. Both properties should be of type `Double`.
 */
struct GPS {
    var latitude: Double
    var longitude: Double
}

// Now create a constant instance of `GPS` called `somePlace`, and use the memberwise initializer to set `latitude` to 51.514004, and `longitude` to 0.125226.
let somePlace = GPS(latitude: 51.514004, longitude: 0.125226)

// Print the values of `somePlace`'s properties.
print("GPS Coordinates - Latitude: \(somePlace.latitude), Longitude: \(somePlace.longitude)")

/*:
 In Structs, Instance, and Default Values, you also created a `Book` struct with properties `title`, `author`, `pages`, and `price`. Create this struct again without default values. Give each property the appropriate type.
 */
struct Book {
    var title: String
    var author: String
    var pages: Int
    var price: Double
}

// Declare your `favoriteBook` instance and pass in the values of your favorite book using the memberwise initializer.
let favoriteBook = Book(title: "The Great Gatsby", author: "F. Scott Fitzgerald", pages: 180, price: 10.99)

// Print a statement about your favorite book using `favoriteBook`'s properties.
print("Favorite Book - Title: \(favoriteBook.title), Author: \(favoriteBook.author), Pages: \(favoriteBook.pages), Price: $\(favoriteBook.price)")

/*:
 Make a `Laptop` struct with three variable properties, `screenSize` of type `Int`, `repairCount` of type `Int`, and `yearPurchased` of type `Int`. 
 Give `screenSize` a default value of `13` and `repairCount` a default value of `0`, and leave `yearPurchased` without a default value.
 */
struct Laptop {
    var screenSize: Int = 13
    var repairCount: Int = 0
    var yearPurchased: Int
}

// Declare two instances of `Laptop`, using the two provided memberwise initializers.
let myLaptop = Laptop(yearPurchased: 2020)
let yourLaptop = Laptop(screenSize: 15, yearPurchased: 2021)

// Print the details of both laptops.
print("My Laptop - Screen Size: \(myLaptop.screenSize) inches, Repair Count: \(myLaptop.repairCount), Year Purchased: \(myLaptop.yearPurchased)")
print("Your Laptop - Screen Size: \(yourLaptop.screenSize) inches, Repair Count: \(yourLaptop.repairCount), Year Purchased: \(yourLaptop.yearPurchased)")

/*:
 Make a `Height` struct with two variable properties, `heightInInches` and `heightInCentimeters`. Both should be of type `Double`.
 */
struct Height {
    var heightInInches: Double
    var heightInCentimeters: Double
    
    // Custom initializer for height in inches
    init(heightInInches: Double) {
        self.heightInInches = heightInInches
        self.heightInCentimeters = heightInInches * 2.54
    }
    
    // Custom initializer for height in centimeters
    init(heightInCentimeters: Double) {
        self.heightInCentimeters = heightInCentimeters
        self.heightInInches = heightInCentimeters / 2.54
    }
}

// Create a variable instance of `Height` called `someonesHeight`. Use the initializer for inches to set the height to 65.
var someonesHeight = Height(heightInInches: 65)

// Print out the property for height in centimeters and verify that it is equal to 165.1.
print("Someone's Height - Height in Centimeters: \(someonesHeight.heightInCentimeters) cm") // Should be 165.1

// Now create a variable instance of `Height` called `myHeight` and initialize it with your own height.
var myHeight = Height(heightInInches: 70) // Replace 70 with your actual height in inches

// Verify that both `heightInInches` and `heightInCentimeters` are accurate.
print("My Height - Height in Inches: \(myHeight.heightInInches) inches, Height in Centimeters: \(myHeight.heightInCentimeters) cm")

