func calculatePace(currentDistance: Double, totalDistance: Double, currentTime: Double) -> Double {
    // Calculate the pace per distance
    let pacePerDistance = currentTime / currentDistance
    // Calculate the total time to finish the run
    let totalTime = pacePerDistance * totalDistance
    return totalTime
}

// Call the calculatePace function and print the return value
let finishTime = calculatePace(currentDistance: 5.0, totalDistance: 10.0, currentTime: 30.0)
print("Estimated finish time: \(finishTime) minutes")

/*:
 Now write a function called `pacing` that takes four `Double` arguments called `currentDistance`, `totalDistance`, `currentTime`, and `goalTime`. The function should also return a `String`, which will be the message to show the user. The function should call `calculatePace`, passing in the appropriate values, and capture the return value. The function should then compare the returned value to `goalTime` and if the user is on pace return "Keep it up!", and return "You've got to push it just a bit harder!" otherwise. Call the function and print the return value.
 */
func pacing(currentDistance: Double, totalDistance: Double, currentTime: Double, goalTime: Double) -> String {
    // Call calculatePace to get the estimated finish time
    let estimatedFinishTime = calculatePace(currentDistance: currentDistance, totalDistance: totalDistance, currentTime: currentTime)
    
    // Compare estimated finish time with goal time
    if estimatedFinishTime <= goalTime {
        return "Keep it up!"
    } else {
        return "You've got to push it just a bit harder!"
    }
}

// Call the pacing function and print the return value
let pacingMessage = pacing(currentDistance: 5.0, totalDistance: 10.0, currentTime: 30.0, goalTime: 60.0)
print(pacingMessage) // Output: Keep it up!
